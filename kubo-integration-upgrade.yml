<%
  k8s_171 = 'v0.7.0'
  iaas_list = %w(gcp-lb)
%>
---
groups:
- name: all
  jobs:
<% iaas_list.each do |iaas| %>
  - claim-lock-<%= iaas %>
  - install-old-bosh-<%= iaas %>
  - deploy-old-k8s-<%= iaas %>
  - deploy-workload-<%= iaas %>
  - upgrade-stemcell-<%= iaas %>
  - upgrade-bosh-<%= iaas %>
  - upgrade-kubo-<%= iaas %>
  - destroy-k8s-<%= iaas %>
  - destroy-bosh-<%= iaas %>
<% end %>
<% iaas_list.each do |iaas| %>
- name: <%= iaas %>
  jobs:
  - claim-lock-<%= iaas %>
  - install-old-bosh-<%= iaas %>
  - deploy-old-k8s-<%= iaas %>
  - deploy-workload-<%= iaas %>
  - upgrade-stemcell-<%= iaas %>
  - upgrade-bosh-<%= iaas %>
  - upgrade-kubo-<%= iaas %> # watch for the workload to be accessible
  - destroy-k8s-<%= iaas %>
  - destroy-bosh-<%= iaas %>
<% end %>
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: upgrade-with-persistent-volumes

<% iaas_list.each do |iaas| %>
- name: kubo-lock-<%= iaas %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key))
    pool: kubo-<%= iaas %>
<% end %>

<% if iaas_list.include? "openstack" %>
 - name: kubo-lock-openstack-global
   type: pool
   source:
     uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
     branch: master
     private_key: ((git-ssh-key))
     pool: kubo-openstack-global
<% end %>

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: new-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: new-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz

# old version of kubo
- name: old-kubo-release-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-release
    pre_release: true
    access_token:

- name: old-kubo-deployment-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    pre_release: true
    access_token:

<% iaas_list.each do |iaas| %>
- name: new-bosh-stemcell-<%= iaas %>
  type: bosh-io-stemcell
  source:
    <% if iaas.include? "gcp-lb" %>
    name: bosh-google-kvm-ubuntu-trusty-go_agent
    <% else %>
    name: bosh-<%= iaas %>-kvm-ubuntu-trusty-go_agent
    <% end %>
    version: 3445.11
<% end %>

##########################################
# Jobs
##########################################

jobs:

<% iaas_list.each do |iaas| %>
- name: claim-lock-<%= iaas %>
  max_in_flight: 1
  plan:
  <% if iaas.include? "openstack" %>
  - put: kubo-lock-openstack-global
    params: { acquire: true }
  <% end %>  
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }

- name: install-old-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: old-kubo-deployment-tarball
      version: { tag: '<%= k8s_171 %>' }
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'claim-lock-<%= iaas %>' ]
    <% end %> 


  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-old-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: old-kubo-deployment-tarball
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    <% end %>
    - get: old-kubo-release-tarball
      version: { tag: '<%= k8s_171 %>' }

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: deploy
    tags: [<%= iaas %>]
    input_mapping:
      gcs-kubo-release-tarball: old-kubo-release-tarball
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml

- name: deploy-workload-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: new-kubo-deployment-tarball
    - get: gcs-bosh-state
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    <% end %>

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: new-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: deploy
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/deploy-k8s-workload.yml
    input_mapping:
      git-kubo-deployment: unpacked_dir
      kubo-lock: kubo-lock-<%= iaas %>

- name: upgrade-stemcell-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: old-kubo-deployment-tarball
    - get: old-kubo-release-tarball
    - get: gcs-bosh-state
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-workload-<%= iaas %>' ]
    - get: new-bosh-stemcell-<%= iaas %>
      params:
        tarball: false
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'deploy-workload-<%= iaas %>' ]
    <% end %>

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: upgrade
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/upgrade-stemcell.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir
      gcs-kubo-release-tarball: old-kubo-release-tarball
      new-bosh-stemcell: new-bosh-stemcell-<%= iaas %>
    params:
      HA_MIN_SERVICE_AVAILABILITY: "0.99"

- name: upgrade-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'upgrade-stemcell-<%= iaas %>' ]
    - get: new-kubo-deployment-tarball
    - get: gcs-bosh-state
      passed: [ 'upgrade-stemcell-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-stemcell-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'upgrade-stemcell-<%= iaas %>' ]
    <% end %>    

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: new-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: upgrade
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/upgrade-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir
    params:
      HA_MIN_SERVICE_AVAILABILITY: "0.99"

- name: upgrade-kubo-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'upgrade-bosh-<%= iaas %>' ]
    - get: new-kubo-release-tarball
    - get: new-kubo-deployment-tarball
      passed: [ 'upgrade-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-bosh-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'upgrade-bosh-<%= iaas %>' ]
    <% end %>       

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: new-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: upgrade
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/upgrade-kubo.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir
      gcs-kubo-release-tarball: new-kubo-release-tarball
    params:
      HA_MIN_SERVICE_AVAILABILITY: "0.99"


- name: destroy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'upgrade-kubo-<%= iaas %>' ]
    - get: new-kubo-deployment-tarball
      passed: [ 'upgrade-kubo-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-kubo-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-kubo-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'upgrade-kubo-<%= iaas %>' ]
    <% end %>

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: new-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir


- name: destroy-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: new-kubo-deployment-tarball
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-openstack-global
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    <% end %>

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: [ '<%= iaas %>' ]
    input_mapping:
      source_tarball: new-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment

  - task: destroy
    tags: [ '<%= iaas %>' ]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir

  - put: kubo-lock-<%= iaas %>
    params:
      release: kubo-lock-<%= iaas %>
  <% if iaas.include? "openstack" %>
  - put: kubo-lock-openstack-global
    params:
      release: kubo-lock-openstack-global
  <% end %>


<% end %>
